{"version":3,"file":"static/js/425.ee75f25a.chunk.js","mappings":"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","sources":["helpers/ScrollToTopButton.jsx","components/TodosForm/UpdateTodosForm.jsx","hooks/useLocalDate.js","components/TodosItem/TodosItem.jsx","components/TodosList/TodosList.jsx","components/AllTodos/AllTodos.jsx","hooks/useMobileStyle.js","redux/todos/selectors.js"],"sourcesContent":["import React from 'react';\n\nimport { Button } from 'react-bootstrap';\nimport { FaArrowUp } from 'react-icons/fa';\n\nconst ScrollToTopButton = ({ isAccordionOpen }) => {\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  return (\n    <Button\n      variant=\"outline-primary\"\n      className={`position-absolute bottom-0 end-0 scroll-to-top-button me-3 ${\n        isAccordionOpen ? 'visible' : 'invisible'\n      }`}\n      onClick={scrollToTop}\n    >\n      <FaArrowUp className=\"scroll-to-top-icon\" />\n    </Button>\n  );\n};\n\nexport default ScrollToTopButton;\n","import { Button, Form } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\n\nexport default function UpdateTodosForm({\n  handleSubmit,\n  descriptionUpdate,\n  handleChange,\n  description,\n  reset,\n}) {\n  const { t } = useTranslation();\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n        <Form.Control\n          as=\"textarea\"\n          rows={3}\n          type=\"text\"\n          name=\"description\"\n          value={descriptionUpdate}\n          onChange={handleChange}\n        />\n      </Form.Group>\n      <Button\n        className=\"me-3\"\n        variant=\"primary\"\n        type=\"submit\"\n        disabled={descriptionUpdate === description}\n      >\n        {t('update_todo')}\n      </Button>\n      <Button variant=\"secondary\" onClick={() => reset()}>\n        {t('cancel')}\n      </Button>\n    </Form>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport moment from 'moment-timezone';\n\nexport default function useLocalDate(date) {\n  const [localDate, setLocalDate] = useState(null);\n\n  useEffect(() => {\n    if (date) {\n      const userTimezone = moment.tz.guess();\n      const local = moment(date).tz(userTimezone).format('DD.MM.YYYY');\n\n      setLocalDate(local);\n    }\n  }, [date]);\n\n  return localDate;\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { useTranslation } from 'react-i18next';\nimport toast from 'react-hot-toast';\nimport {\n  MdOutlineDeleteForever,\n  MdBorderColor,\n  MdOutlineRefresh,\n} from 'react-icons/md';\nimport { BsDatabaseCheck } from 'react-icons/bs';\nimport {\n  Accordion,\n  Button,\n  Form,\n  Tooltip,\n  OverlayTrigger,\n} from 'react-bootstrap';\n\nimport propTypes from 'prop-types';\n\nimport {\n  fetchDeleteTodo,\n  fetchUpdateTodo,\n  fetchCompletedToggle,\n  fetchArchivedToggle,\n} from '../../redux/todos/operations';\nimport UpdateTodosForm from 'components/TodosForm/UpdateTodosForm';\nimport useMobileStyle from '../../hooks/useMobileStyle';\nimport useLocalDate from '../../hooks/useLocalDate';\n\nconst TodosItem = ({\n  _id,\n  title,\n  description,\n  createdAt,\n  updatedAt,\n  plannedDate,\n  completedDate,\n  overdueDate,\n  archivedDate,\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [descriptionUpdate, setDescriptionUpdate] = useState(description);\n\n  const dispatch = useDispatch();\n\n  const { t } = useTranslation();\n\n  let refreshDate = null;\n  const isCompleted = completedDate !== null;\n  const isOverdue = overdueDate !== null;\n  const isArchive = archivedDate !== null;\n\n  // isOverdue && !isArchive ? (refreshDate = updatedAt) : (refreshDate = null);\n  const isRefresh = refreshDate !== null;\n\n  const isMobileStyle = useMobileStyle();\n\n  const localCreatedAt = useLocalDate(createdAt);\n  const localUpdatedAt = useLocalDate(updatedAt);\n  const localPlannedDate = useLocalDate(plannedDate);\n  const localCompletedDate = useLocalDate(completedDate);\n  const localOverdueDate = useLocalDate(overdueDate);\n  const localArchivedDate = useLocalDate(archivedDate);\n  const localRefreshDate = useLocalDate(refreshDate);\n\n  // console.log('refreshDate => ', refreshDate);\n  // console.log('isRefresh => ', isRefresh);\n  // console.log('localRefreshDate => ', localRefreshDate);\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'description':\n        setDescriptionUpdate(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    dispatch(fetchUpdateTodo({ _id: _id, description: descriptionUpdate }));\n\n    toast.success(`${t('todo_update')}`);\n\n    setIsEditing(false);\n  };\n\n  const deleteTodo = _id => {\n    dispatch(fetchDeleteTodo(_id));\n\n    toast.success(`${t('todo_deleted')}`);\n  };\n\n  const completedToggle = _id => {\n    dispatch(fetchCompletedToggle(_id));\n\n    !isCompleted\n      ? toast.success(`${t('todo_completed')}`)\n      : toast.success(`${t('todo_not_completed')}`);\n  };\n\n  const archivedToggle = _id => {\n    dispatch(fetchArchivedToggle(_id));\n\n    !isArchive\n      ? toast.success(`${t('added_to_archive')}`)\n      : toast.success(`${t('del_to_archive')}`);\n  };\n\n  const handleToggle = (e, _id) => {\n    e.target.blur();\n\n    completedToggle(_id);\n  };\n\n  const toArchiveTodo = _id => {\n    // e.target.blur();\n\n    archivedToggle(_id);\n  };\n\n  const reset = () => {\n    setIsEditing(false);\n    setDescriptionUpdate(description);\n  };\n\n  return (\n    <Accordion.Item eventKey={_id}>\n      <div className=\"d-flex gap-3 align-items-center px-3\">\n        {!isOverdue && (\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip>{t('is_completed')}</Tooltip>}\n          >\n            <Form.Check\n              aria-label=\"option 1\"\n              id={`toggle-check-${_id}`}\n              type=\"checkbox\"\n              variant=\"outline-primary\"\n              checked={isCompleted}\n              disabled={isEditing === true}\n              value=\"1\"\n              onChange={e => handleToggle(e, _id)}\n            />\n          </OverlayTrigger>\n        )}\n        {isOverdue && (\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip>{t('overdue')}</Tooltip>}\n          >\n            <Form.Check\n              isInvalid\n              defaultChecked\n              type=\"radio\"\n              id={`toggle-check-${_id}`}\n            />\n          </OverlayTrigger>\n        )}\n        <Accordion.Header className=\"w-100\">\n          {isMobileStyle ? (\n            <OverlayTrigger\n              placement=\"top\"\n              overlay={<Tooltip>{title}</Tooltip>}\n            >\n              <h5 className=\"w-100 mb-0 text-truncate custom-accordion-header\">\n                {title}\n              </h5>\n            </OverlayTrigger>\n          ) : (\n            <h5 className=\"w-100 mb-0 text-truncate custom-accordion-header\">\n              {title}\n            </h5>\n          )}\n        </Accordion.Header>\n        {isCompleted || isOverdue ? (\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={\n              <Tooltip>\n                {isArchive && isOverdue\n                  ? `${t('refresh')}`\n                  : `${t('add_to_archive')}`}\n              </Tooltip>\n            }\n          >\n            <Button\n              key={`archive-${_id}`}\n              disabled={isArchive && isCompleted}\n              className={`ms-auto btn ${\n                isArchive && isOverdue ? 'btn-primary' : 'btn-success'\n              } ${isArchive && isCompleted && 'btn-warning'}`}\n              type=\"button\"\n              onClick={() => toArchiveTodo(_id)}\n            >\n              {isArchive && isOverdue ? (\n                <MdOutlineRefresh />\n              ) : (\n                <BsDatabaseCheck />\n              )}\n            </Button>\n          </OverlayTrigger>\n        ) : (\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip>{`${t('delete')}`}</Tooltip>}\n          >\n            <Button\n              disabled={isEditing}\n              className=\"ms-auto btn btn-danger\"\n              type=\"button\"\n              onClick={() => deleteTodo(_id)}\n            >\n              <MdOutlineDeleteForever />\n            </Button>\n          </OverlayTrigger>\n        )}\n      </div>\n      <Accordion.Body className=\"p-3\" onExited={() => setIsEditing(false)}>\n        {!isEditing ? (\n          <>\n            <p className=\"mb-3 border rounded p-2\">{description}</p>\n\n            <div className=\"d-flex flex-wrap gap-3 align-items-center\">\n              <div>\n                {t('created')}: <b>{localCreatedAt}</b>\n              </div>\n              <div>\n                {t('updated')}: <b> {localUpdatedAt}</b>\n              </div>\n              <div>\n                {t('planned_date')}: <b> {localPlannedDate}</b>\n              </div>\n              {!isOverdue && (\n                <div className={isCompleted ? 'text-success' : ''}>\n                  {t('completed')}:\n                  <b> {isCompleted ? localCompletedDate : '??.??.????'}</b>\n                </div>\n              )}\n              {isOverdue && (\n                <div className=\"text-danger\">\n                  {t('overdue')}: <b>{localOverdueDate}</b>\n                </div>\n              )}\n              {isRefresh && (\n                <div className=\"text-primary\">\n                  {t('is_refresh')}: <b>{localRefreshDate}</b>\n                </div>\n              )}\n              {isArchive && (\n                <div className=\"text-warning\">\n                  {t('archive')}: <b>{localArchivedDate}</b>\n                </div>\n              )}\n\n              {!isOverdue && (\n                //   <OverlayTrigger\n                //     placement=\"top\"\n                //     overlay={<Tooltip>{`${t('refresh')}`}</Tooltip>}\n                //   >\n                //     <Button\n                //       className=\"ms-auto btn btn-primary\"\n                //       type=\"button\"\n                //       // onClick={() => toRefreshTodo(_id)}\n                //     >\n                //       <MdOutlineRefresh />\n                //     </Button>\n                //   </OverlayTrigger>\n                // ) : (\n                <OverlayTrigger\n                  placement=\"top\"\n                  overlay={<Tooltip>{`${t('edit')}`}</Tooltip>}\n                >\n                  <Button\n                    disabled={isCompleted}\n                    className=\"ms-auto btn btn-primary\"\n                    type=\"button\"\n                    onClick={() => setIsEditing(true)}\n                  >\n                    <MdBorderColor />\n                  </Button>\n                </OverlayTrigger>\n              )}\n            </div>\n          </>\n        ) : (\n          <UpdateTodosForm\n            handleSubmit={handleSubmit}\n            descriptionUpdate={descriptionUpdate}\n            handleChange={handleChange}\n            description={description}\n            reset={reset}\n          />\n        )}\n      </Accordion.Body>\n    </Accordion.Item>\n  );\n};\n\nTodosItem.propTypes = {\n  _id: propTypes.string.isRequired,\n  title: propTypes.string.isRequired,\n  description: propTypes.string.isRequired,\n  createdAt: propTypes.string.isRequired,\n  updatedAt: propTypes.string.isRequired,\n  completedDate: propTypes.string,\n  overdueDate: propTypes.string,\n  archivedDate: propTypes.string,\n};\n\nexport default TodosItem;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Accordion, Button } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport ScrollToTopButton from '../../helpers/ScrollToTopButton';\nimport { getFoundTodos } from '../../redux/todos/selectors';\nimport TodosItem from '../TodosItem/TodosItem';\nimport { fetchAllTodos } from 'redux/todos/operations';\nimport {\n  getSearchQuery,\n  getPage,\n  getTotalTodos,\n} from '../../redux/todos/selectors';\n\nconst TodosList = ({ statusTodo }) => {\n  const [activeAccordionKey, setActiveAccordionKey] = useState([]);\n  const [isAccordionOpen, setIsAccordionOpen] = useState(false);\n\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const page = useSelector(getPage);\n  const query = useSelector(getSearchQuery);\n  const totalTodos = useSelector(getTotalTodos);\n  const status = statusTodo;\n\n  useEffect(() => {\n    // console.log('TodosList useEffect');\n    dispatch(fetchAllTodos({ page, query, status }));\n  }, [dispatch, page, query, totalTodos, status]);\n\n  const foundTodos = useSelector(getFoundTodos);\n\n  useEffect(\n    isAccordionOpen => {\n      !isAccordionOpen && setIsAccordionOpen(false);\n      setActiveAccordionKey([]);\n    },\n    [foundTodos]\n  );\n\n  const handleToggleAccordion = () => {\n    if (!isAccordionOpen && activeAccordionKey.length > 0) {\n      foundTodos.forEach(({ _id }) => {\n        setActiveAccordionKey(prevStates => {\n          if (prevStates.includes(_id)) {\n            return prevStates;\n          } else {\n            return [...prevStates, _id];\n          }\n        });\n      });\n    } else if (!isAccordionOpen) {\n      foundTodos.forEach(({ _id }) => {\n        setActiveAccordionKey(prevStates => {\n          return [...prevStates, _id];\n        });\n      });\n    } else {\n      setActiveAccordionKey([]);\n    }\n\n    setIsAccordionOpen(prevState => !prevState);\n  };\n\n  const handleAccordionSelect = key => {\n    setActiveAccordionKey(prevStates => {\n      if (prevStates.includes(key)) {\n        return prevStates.filter(id => id !== key);\n      } else {\n        return key;\n      }\n    });\n\n    if (foundTodos.length - 1 === activeAccordionKey.length) {\n      setIsAccordionOpen(prevState => !prevState);\n    }\n  };\n\n  return (\n    <div className=\"mb-3 pb-5 position-relative d-flex flex-column\">\n      {foundTodos.length > 0 && (\n        <Button\n          variant=\"outline-primary\"\n          onClick={handleToggleAccordion}\n          className=\"position-absolute bottom-0 start-0 ms-3\"\n        >\n          {isAccordionOpen\n            ? `${t('is_accordion_close')}`\n            : `${t('is_accordion_open')}`}\n        </Button>\n      )}\n\n      <ScrollToTopButton isAccordionOpen={isAccordionOpen} />\n      {foundTodos.length !== 0 ? (\n        <>\n          <Accordion\n            flush\n            alwaysOpen\n            activeKey={activeAccordionKey}\n            onSelect={handleAccordionSelect}\n            className=\"border\"\n          >\n            {foundTodos.map(\n              ({\n                _id,\n                title,\n                description,\n                createdAt,\n                updatedAt,\n                plannedDate,\n                completedDate,\n                overdueDate,\n                archivedDate,\n              }) => {\n                return (\n                  <TodosItem\n                    key={_id}\n                    _id={_id}\n                    title={title}\n                    description={description}\n                    createdAt={createdAt}\n                    updatedAt={updatedAt}\n                    plannedDate={plannedDate}\n                    completedDate={completedDate}\n                    overdueDate={overdueDate}\n                    archivedDate={archivedDate}\n                  />\n                );\n              }\n            )}\n          </Accordion>\n        </>\n      ) : (\n        <div className=\"text-center py-5 border rounded bs-accordion-bg\">\n          <p>{t('no_todos_text')}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TodosList;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport TodosList from 'components/TodosList/TodosList';\nimport { getStatusTodo } from '../../redux/todos/selectors';\n\nexport default function AllTodos() {\n  const status = useSelector(getStatusTodo);\n\n  return <TodosList statusTodo={status} />;\n}\n","import { useState, useEffect } from 'react';\n\nfunction useMobileStyle() {\n  const [isMobileStyle, setMobileStyle] = useState(false);\n\n  useEffect(() => {\n    const resizeScreen = () => {\n      setMobileStyle(window.innerWidth <= 576);\n    };\n\n    resizeScreen();\n    window.addEventListener('resize', resizeScreen);\n\n    return () => {\n      window.removeEventListener('resize', resizeScreen);\n    };\n  }, []);\n\n  return isMobileStyle;\n}\n\nexport default useMobileStyle;\n","export const getTotalPages = state => state.todos.totalPages;\n\nexport const getPage = state => state.todos.page;\n\nexport const getTotalTodos = state => state.todos.totalTodos;\n\nexport const getSearchQuery = state => state.todos.search;\n\nexport const getStatusTodo = state => state.todos.status;\n\nexport const getFoundTodos = state => {\n  if (!state.todos.search) {\n    return state.todos.items;\n  }\n  const result = state.todos.items.filter(({ title, description }) => {\n    return (\n      title.toLowerCase().includes(state.todos.search.toLowerCase()) ||\n      description.toLowerCase().includes(state.todos.search.toLowerCase())\n    );\n  });\n  return result;\n};\n\nexport const selectLoading = state => state.todos.loading;\n"],"names":["_ref","isAccordionOpen","_jsx","Button","variant","className","concat","onClick","window","scrollTo","top","behavior","children","FaArrowUp","UpdateTodosForm","handleSubmit","descriptionUpdate","handleChange","description","reset","t","useTranslation","_jsxs","Form","onSubmit","controlId","as","rows","type","name","value","onChange","disabled","useLocalDate","date","_useState","useState","_useState2","_slicedToArray","localDate","setLocalDate","useEffect","userTimezone","moment","local","tz","format","_id","title","createdAt","updatedAt","plannedDate","completedDate","overdueDate","archivedDate","isEditing","setIsEditing","_useState3","_useState4","setDescriptionUpdate","dispatch","useDispatch","isCompleted","isOverdue","isArchive","isMobileStyle","useMobileStyle","localCreatedAt","localUpdatedAt","localPlannedDate","localCompletedDate","localOverdueDate","localArchivedDate","handleToggle","e","target","blur","fetchCompletedToggle","toast","completedToggle","toArchiveTodo","fetchArchivedToggle","archivedToggle","Accordion","eventKey","OverlayTrigger","placement","overlay","Tooltip","id","checked","isInvalid","defaultChecked","MdOutlineRefresh","BsDatabaseCheck","fetchDeleteTodo","deleteTodo","MdOutlineDeleteForever","onExited","event","preventDefault","fetchUpdateTodo","_event$currentTarget","currentTarget","_Fragment","refreshDate","MdBorderColor","statusTodo","activeAccordionKey","setActiveAccordionKey","setIsAccordionOpen","page","useSelector","getPage","query","getSearchQuery","totalTodos","getTotalTodos","status","fetchAllTodos","foundTodos","getFoundTodos","length","forEach","_ref2","prevStates","includes","_toConsumableArray","_ref3","prevState","ScrollToTopButton","flush","alwaysOpen","activeKey","onSelect","key","filter","map","_ref4","TodosItem","AllTodos","getStatusTodo","TodosList","setMobileStyle","resizeScreen","innerWidth","addEventListener","removeEventListener","getTotalPages","state","todos","totalPages","search","items","toLowerCase"],"sourceRoot":""}