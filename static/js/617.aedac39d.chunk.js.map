{"version":3,"file":"static/js/617.aedac39d.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","pages/Login/Login.js","utils/PasswordToggle.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { Form, Button, InputGroup } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { logIn } from 'redux/auth/authOperations';\nimport PasswordToggle from '../../utils/PasswordToggle';\n\nexport const LoginForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const schemaLogin = yup.object().shape({\n    email: yup\n      .string()\n      .required(\"Email є обов'язковим\")\n      .email('Введіть коректний email'),\n    password: yup\n      .string()\n      .required(\"Пароль є обов'язковим\")\n      .min(8, 'Пароль повинен бути не менше 8 символів')\n      .matches(\n        /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/,\n        'Пароль повинен містити принаймні одну цифру, одну маленьку і одну велику літеру'\n      ),\n  });\n\n  const handleTogglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const { t } = useTranslation();\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const isValid = await schemaLogin.isValid(values);\n\n    if (!isValid) {\n      return;\n    }\n\n    dispatch(\n      logIn({\n        email: values.email,\n        password: values.password,\n      })\n    );\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      validationSchema={schemaLogin}\n      onSubmit={handleSubmit}\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n    >\n      {({ handleSubmit, handleChange, values, touched, errors }) => (\n        <Form noValidate onSubmit={handleSubmit} className=\"mx-auto\">\n          <Form.Group controlId=\"formLoginEmail\" className=\"mb-4\">\n            <Form.Label>{t('email')}:</Form.Label>\n            <Form.Control\n              type=\"email\"\n              name=\"email\"\n              placeholder={t('placeholder_email')}\n              value={values.email}\n              onChange={handleChange}\n              isValid={touched.email && !errors.email}\n              isInvalid={!!errors.email}\n            />\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.email}\n            </Form.Control.Feedback>\n            <Form.Text className=\"text-muted\">{t('form_text')}</Form.Text>\n          </Form.Group>\n          <Form.Group controlId=\"formLoginPassword\" className=\"mb-4\">\n            <Form.Label>{t('password')}:</Form.Label>\n            <InputGroup hasValidation>\n              <Form.Control\n                type={showPassword ? 'text' : 'password'}\n                name=\"password\"\n                value={values.password}\n                placeholder={t('placeholder_password')}\n                onChange={handleChange}\n                isValid={touched.password && !errors.password}\n                isInvalid={!!errors.password}\n              />\n              <PasswordToggle\n                showPassword={showPassword}\n                togglePassword={handleTogglePassword}\n              />\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.password}\n              </Form.Control.Feedback>\n            </InputGroup>\n          </Form.Group>\n          <Button type=\"submit\" className=\"m-2\" variant=\"primary\">\n            {t('login')}\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { useTranslation } from 'react-i18next';\n\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  const { t } = useTranslation();\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>{t('login')}</title>\n      </Helmet>\n      <div className=\"d-flex flex-column  mt-5 pt-5\">\n        <h2 className=\"text-uppercase mb-2 mx-auto\">{t('login')}</h2>\n        <LoginForm />\n      </div>\n    </HelmetProvider>\n  );\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { PiEyeClosedBold, PiEyeBold } from 'react-icons/pi';\n\nfunction PasswordToggle({ showPassword, togglePassword }) {\n  return (\n    <Button\n      className=\"input-group-append border-light-subtle rounded-end\"\n      type=\"button\"\n      variant=\"outline-secondary\"\n      onClick={togglePassword}\n    >\n      {showPassword ? <PiEyeClosedBold /> : <PiEyeBold />}\n    </Button>\n  );\n}\n\nexport default PasswordToggle;\n"],"names":["LoginForm","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","schemaLogin","yup","shape","email","required","password","min","matches","handleTogglePassword","t","useTranslation","dispatch","useDispatch","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref","resetForm","wrap","_context","prev","next","isValid","sent","abrupt","logIn","stop","_x","_x2","apply","arguments","_jsx","Formik","validationSchema","onSubmit","initialValues","children","_ref3","handleChange","touched","errors","_jsxs","Form","noValidate","className","controlId","type","name","placeholder","value","onChange","isInvalid","InputGroup","hasValidation","PasswordToggle","togglePassword","Button","variant","Login","HelmetProvider","Helmet","onClick","PiEyeClosedBold","PiEyeBold"],"sourceRoot":""}