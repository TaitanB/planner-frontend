{"version":3,"file":"static/js/841.c1719f24.chunk.js","mappings":"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","sources":["components/Overdue/Overdue.jsx","helpers/ScrollToTopButton.jsx","components/TodosForm/UpdateTodosForm.jsx","hooks/useLocalDate.js","components/TodosItem/TodosItem.jsx","components/TodosList/TodosList.jsx","hooks/useMobileStyle.js","redux/todos/selectors.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport TodosList from 'components/TodosList/TodosList';\nimport { fetchAllTodos } from 'redux/todos/operations';\nimport { Filtered, getPage, getTotalTodos } from '../../redux/todos/selectors';\n\nconst Overdue = () => {\n  const page = useSelector(getPage);\n  const query = useSelector(Filtered);\n  const totalTodos = useSelector(getTotalTodos);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllTodos({ page, query }));\n  }, [dispatch, page, query, totalTodos]);\n\n  return (\n    <div className=\"d-flex flex-column\">\n      <TodosList />\n    </div>\n  );\n};\n\nexport default Overdue;\n","import React from 'react';\n\nimport { Button } from 'react-bootstrap';\nimport { FaArrowUp } from 'react-icons/fa';\n\nconst ScrollToTopButton = ({ isAccordionOpen }) => {\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  return (\n    <Button\n      variant=\"outline-primary\"\n      className={`position-absolute bottom-0 end-0 scroll-to-top-button me-3 ${\n        isAccordionOpen ? 'visible' : 'invisible'\n      }`}\n      onClick={scrollToTop}\n    >\n      <FaArrowUp className=\"scroll-to-top-icon\" />\n    </Button>\n  );\n};\n\nexport default ScrollToTopButton;\n","import { Button, Form } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\n\nexport default function UpdateTodosForm({\n  handleSubmit,\n  descriptionUpdate,\n  handleChange,\n  description,\n  reset,\n}) {\n  const { t } = useTranslation();\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n        <Form.Control\n          as=\"textarea\"\n          rows={3}\n          type=\"text\"\n          name=\"description\"\n          value={descriptionUpdate}\n          onChange={handleChange}\n        />\n      </Form.Group>\n      <Button\n        className=\"me-3\"\n        variant=\"primary\"\n        type=\"submit\"\n        disabled={descriptionUpdate === description}\n      >\n        {t('update_todo')}\n      </Button>\n      <Button variant=\"secondary\" onClick={() => reset()}>\n        {t('cancel')}\n      </Button>\n    </Form>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport moment from 'moment-timezone';\n\nexport default function useLocalDate(date) {\n  const [localDate, setLocalDate] = useState(null);\n\n  useEffect(() => {\n    if (date) {\n      const userTimezone = moment.tz.guess();\n      //   console.log(userTimezone);\n      const local = moment(date).tz(userTimezone).format('DD.MM.YYYY');\n      setLocalDate(local);\n    }\n  }, [date]);\n\n  return localDate;\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { useTranslation } from 'react-i18next';\nimport toast from 'react-hot-toast';\nimport { MdOutlineDeleteForever, MdBorderColor } from 'react-icons/md';\nimport { BsDatabaseCheck } from 'react-icons/bs';\nimport {\n  Accordion,\n  Button,\n  Form,\n  Tooltip,\n  OverlayTrigger,\n} from 'react-bootstrap';\n\nimport propTypes from 'prop-types';\n\nimport {\n  fetchDeleteTodo,\n  fetchUpdateTodo,\n  fetchCompletedToggle,\n} from '../../redux/todos/operations';\nimport UpdateTodosForm from 'components/TodosForm/UpdateTodosForm';\nimport useMobileStyle from '../../hooks/useMobileStyle';\nimport useLocalDate from '../../hooks/useLocalDate';\n\nconst TodosItem = ({\n  _id,\n  title,\n  description,\n  createdAt,\n  updatedAt,\n  plannedDate,\n  completedDate,\n  overdueDate,\n  archiveDate,\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [descriptionUpdate, setDescriptionUpdate] = useState(description);\n\n  const dispatch = useDispatch();\n\n  const { t } = useTranslation();\n\n  const isCompleted = completedDate !== null;\n  const isOverdue = overdueDate !== null;\n  const isArchive = archiveDate !== null;\n\n  const isMobileStyle = useMobileStyle();\n\n  const localCreatedAt = useLocalDate(createdAt);\n  const localUpdatedAt = useLocalDate(updatedAt);\n  const localPlannedDate = useLocalDate(plannedDate);\n  const localCompletedDate = useLocalDate(completedDate);\n  const localOverdueDate = useLocalDate(overdueDate);\n  const localArchiveDate = useLocalDate(archiveDate);\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'description':\n        setDescriptionUpdate(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    dispatch(fetchUpdateTodo({ _id: _id, description: descriptionUpdate }));\n\n    toast.success(`${t('todo_update')}`);\n\n    setIsEditing(false);\n  };\n\n  const deleteTodo = _id => {\n    dispatch(fetchDeleteTodo(_id));\n\n    toast.success(`${t('todo_deleted')}`);\n  };\n\n  const completedToggle = _id => {\n    dispatch(fetchCompletedToggle(_id));\n\n    !isCompleted\n      ? toast.success(`${t('todo_completed')}`)\n      : toast.success(`${t('todo_not_completed')}`);\n  };\n\n  const handleToggle = (e, _id) => {\n    e.target.blur();\n\n    completedToggle(_id);\n  };\n\n  const reset = () => {\n    setIsEditing(false);\n    setDescriptionUpdate(description);\n  };\n\n  return (\n    <Accordion.Item eventKey={_id}>\n      <div className=\"d-flex gap-3 align-items-center px-3\">\n        {!isOverdue && (\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip>{t('is_completed')}</Tooltip>}\n          >\n            <Form.Check\n              aria-label=\"option 1\"\n              id={`toggle-check-${_id}`}\n              type=\"checkbox\"\n              variant=\"outline-primary\"\n              checked={isCompleted}\n              disabled={isEditing === true}\n              value=\"1\"\n              onChange={e => handleToggle(e, _id)}\n            />\n          </OverlayTrigger>\n        )}\n        {isOverdue && (\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip>{t('is_overdue')}</Tooltip>}\n          >\n            <Form.Check\n              isInvalid\n              defaultChecked\n              type=\"radio\"\n              id={`toggle-check-${_id}`}\n            />\n          </OverlayTrigger>\n        )}\n        <Accordion.Header className=\"w-100\">\n          {isMobileStyle ? (\n            <OverlayTrigger\n              placement=\"top\"\n              overlay={<Tooltip>{title}</Tooltip>}\n            >\n              <h5 className=\"w-100 mb-0 text-truncate custom-accordion-header\">\n                {title}\n              </h5>\n            </OverlayTrigger>\n          ) : (\n            <h5 className=\"w-100 mb-0 text-truncate custom-accordion-header\">\n              {title}\n            </h5>\n          )}\n        </Accordion.Header>\n        {isCompleted || isOverdue ? (\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip>{`${t('add_to_archive')}`}</Tooltip>}\n          >\n            <Button\n              key={`archive-${_id}`}\n              className=\"ms-auto btn btn-success\"\n              type=\"button\"\n              // onClick={() => toArchiveTodo(_id)}\n            >\n              <BsDatabaseCheck />\n            </Button>\n          </OverlayTrigger>\n        ) : (\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip>{`${t('delete')}`}</Tooltip>}\n          >\n            <Button\n              disabled={isEditing}\n              className=\"ms-auto btn btn-danger\"\n              type=\"button\"\n              onClick={() => deleteTodo(_id)}\n            >\n              <MdOutlineDeleteForever />\n            </Button>\n          </OverlayTrigger>\n        )}\n      </div>\n      <Accordion.Body className=\"p-3\" onExited={() => setIsEditing(false)}>\n        {!isEditing ? (\n          <>\n            <p className=\"mb-3\">{description}</p>\n\n            <div className=\"d-flex flex-wrap gap-3 align-items-center\">\n              <div>\n                {t('created')}: <b>{localCreatedAt}</b>\n              </div>\n              <div>\n                {t('updated')}: <b> {localUpdatedAt}</b>\n              </div>\n              <div>\n                {t('planned_date')}: <b> {localPlannedDate}</b>\n              </div>\n              {overdueDate === null && (\n                <div className={isCompleted ? 'text-success' : ''}>\n                  {t('completed')}:\n                  <b> {isCompleted ? localCompletedDate : '??.??.????'}</b>\n                </div>\n              )}\n              {isOverdue && (\n                <div className=\"text-danger\">\n                  {t('is_overdue')}: <b>{localOverdueDate}</b>\n                </div>\n              )}\n              {isArchive && (\n                <div className=\"text-warning\">\n                  {t('archive')}: <b>{localArchiveDate}</b>\n                </div>\n              )}\n              <OverlayTrigger\n                placement=\"top\"\n                overlay={<Tooltip>{`${t('edit')}`}</Tooltip>}\n              >\n                <Button\n                  disabled={isCompleted || isOverdue}\n                  className=\"ms-auto btn btn-primary\"\n                  type=\"button\"\n                  onClick={() => setIsEditing(true)}\n                >\n                  <MdBorderColor />\n                </Button>\n              </OverlayTrigger>\n            </div>\n          </>\n        ) : (\n          <UpdateTodosForm\n            handleSubmit={handleSubmit}\n            descriptionUpdate={descriptionUpdate}\n            handleChange={handleChange}\n            description={description}\n            reset={reset}\n          />\n        )}\n      </Accordion.Body>\n    </Accordion.Item>\n  );\n};\n\nTodosItem.propTypes = {\n  _id: propTypes.string.isRequired,\n  title: propTypes.string.isRequired,\n  description: propTypes.string.isRequired,\n  createdAt: propTypes.string.isRequired,\n  updatedAt: propTypes.string.isRequired,\n  completedDate: propTypes.string,\n  overdueDate: propTypes.string,\n  archiveDate: propTypes.string,\n};\nexport default TodosItem;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Accordion, Button } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport ScrollToTopButton from '../../helpers/ScrollToTopButton';\nimport { getFilteredTodos } from '../../redux/todos/selectors';\nimport TodosItem from '../TodosItem/TodosItem';\n\nconst TodosList = () => {\n  const [activeAccordionKey, setActiveAccordionKey] = useState([]);\n  const [isAccordionOpen, setIsAccordionOpen] = useState(false);\n\n  const filteredTodos = useSelector(getFilteredTodos);\n\n  const { t } = useTranslation();\n\n  useEffect(\n    isAccordionOpen => {\n      !isAccordionOpen && setIsAccordionOpen(false);\n      setActiveAccordionKey([]);\n    },\n    [filteredTodos]\n  );\n\n  const handleToggleAccordion = () => {\n    if (!isAccordionOpen && activeAccordionKey.length > 0) {\n      filteredTodos.forEach(({ _id }) => {\n        setActiveAccordionKey(prevStates => {\n          if (prevStates.includes(_id)) {\n            return prevStates;\n          } else {\n            return [...prevStates, _id];\n          }\n        });\n      });\n    } else if (!isAccordionOpen) {\n      filteredTodos.forEach(({ _id }) => {\n        setActiveAccordionKey(prevStates => {\n          return [...prevStates, _id];\n        });\n      });\n    } else {\n      setActiveAccordionKey([]);\n    }\n\n    setIsAccordionOpen(prevState => !prevState);\n  };\n\n  const handleAccordionSelect = key => {\n    setActiveAccordionKey(prevStates => {\n      if (prevStates.includes(key)) {\n        return prevStates.filter(id => id !== key);\n      } else {\n        return key;\n      }\n    });\n\n    if (filteredTodos.length - 1 === activeAccordionKey.length) {\n      setIsAccordionOpen(prevState => !prevState);\n    }\n  };\n\n  return (\n    <div className=\"mb-3 pb-5 position-relative\">\n      {filteredTodos.length > 0 && (\n        <Button\n          variant=\"outline-primary\"\n          onClick={handleToggleAccordion}\n          className=\"position-absolute bottom-0 start-0\"\n        >\n          {isAccordionOpen\n            ? `${t('is_accordion_close')}`\n            : `${t('is_accordion_open')}`}\n        </Button>\n      )}\n\n      <ScrollToTopButton isAccordionOpen={isAccordionOpen} />\n      {filteredTodos.length !== 0 ? (\n        <Accordion\n          flush\n          alwaysOpen\n          activeKey={activeAccordionKey}\n          onSelect={handleAccordionSelect}\n          className=\"border\"\n        >\n          {filteredTodos.map(\n            ({\n              _id,\n              title,\n              description,\n              createdAt,\n              updatedAt,\n              plannedDate,\n              completedDate,\n              overdueDate,\n              archiveDate,\n            }) => {\n              return (\n                <TodosItem\n                  key={_id}\n                  _id={_id}\n                  title={title}\n                  description={description}\n                  createdAt={createdAt}\n                  updatedAt={updatedAt}\n                  plannedDate={plannedDate}\n                  completedDate={completedDate}\n                  overdueDate={overdueDate}\n                  archiveDate={archiveDate}\n                />\n              );\n            }\n          )}\n        </Accordion>\n      ) : (\n        <div className=\"text-center py-5 border rounded bs-accordion-bg\">\n          <p>{t('no_todos_text')}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TodosList;\n","import { useState, useEffect } from 'react';\n\nfunction useMobileStyle() {\n  const [isMobileStyle, setMobileStyle] = useState(false);\n\n  useEffect(() => {\n    const resizeScreen = () => {\n      setMobileStyle(window.innerWidth <= 576);\n    };\n\n    resizeScreen();\n    window.addEventListener('resize', resizeScreen);\n\n    return () => {\n      window.removeEventListener('resize', resizeScreen);\n    };\n  }, []);\n\n  return isMobileStyle;\n}\n\nexport default useMobileStyle;\n","export const getTotalPages = state => state.todos.totalPages;\n\nexport const getPage = state => state.todos.page;\n\nexport const getTotalTodos = state => state.todos.totalTodos;\n\nexport const Filtered = state => state.todos.filter;\n\nexport const getFilteredTodos = state => {\n  if (!state.todos.filter) {\n    return state.todos.items;\n  }\n  const result = state.todos.items.filter(({ title, description }) => {\n    return (\n      title.toLowerCase().includes(state.todos.filter.toLowerCase()) ||\n      description.toLowerCase().includes(state.todos.filter.toLowerCase())\n    );\n  });\n  return result;\n};\n\nexport const selectLoading = state => state.todos.loading;\n"],"names":["page","useSelector","getPage","query","Filtered","totalTodos","getTotalTodos","dispatch","useDispatch","useEffect","fetchAllTodos","_jsx","className","children","TodosList","_ref","isAccordionOpen","Button","variant","concat","onClick","window","scrollTo","top","behavior","FaArrowUp","UpdateTodosForm","handleSubmit","descriptionUpdate","handleChange","description","reset","t","useTranslation","_jsxs","Form","onSubmit","controlId","as","rows","type","name","value","onChange","disabled","useLocalDate","date","_useState","useState","_useState2","_slicedToArray","localDate","setLocalDate","userTimezone","moment","local","tz","format","_id","title","createdAt","updatedAt","plannedDate","completedDate","overdueDate","archiveDate","isEditing","setIsEditing","_useState3","_useState4","setDescriptionUpdate","isCompleted","isOverdue","isArchive","isMobileStyle","useMobileStyle","localCreatedAt","localUpdatedAt","localPlannedDate","localCompletedDate","localOverdueDate","localArchiveDate","handleToggle","e","target","blur","fetchCompletedToggle","toast","completedToggle","Accordion","eventKey","OverlayTrigger","placement","overlay","Tooltip","id","checked","isInvalid","defaultChecked","BsDatabaseCheck","fetchDeleteTodo","deleteTodo","MdOutlineDeleteForever","onExited","event","preventDefault","fetchUpdateTodo","_event$currentTarget","currentTarget","_Fragment","MdBorderColor","activeAccordionKey","setActiveAccordionKey","setIsAccordionOpen","filteredTodos","getFilteredTodos","length","forEach","prevStates","includes","_toConsumableArray","_ref2","prevState","ScrollToTopButton","flush","alwaysOpen","activeKey","onSelect","key","filter","map","_ref3","TodosItem","setMobileStyle","resizeScreen","innerWidth","addEventListener","removeEventListener","getTotalPages","state","todos","totalPages","items","toLowerCase"],"sourceRoot":""}